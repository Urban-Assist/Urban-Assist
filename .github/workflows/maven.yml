name: CI/CD Pipeline for User-Auth Microservice

on:
  push:
    paths:
      - 'user-auth/**'
  pull_request:
    paths:
      - 'user-auth/**'
  workflow_dispatch: # Enable manual triggering

env:
  AUTH_SERVER_PORT: 8080
  DB_URL: jdbc:mysql://central-db-web.cjkii4k08kf4.ca-central-1.rds.amazonaws.com:3306/demo # Fetch from GitHub Secrets
  DB_USERNAME: ${{ secrets.DB_USERNAME }} # Fetch from GitHub Secrets
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # Fetch from GitHub Secrets
  EMAIL_SERVER_URL: ${{ secrets.EMAIL_SERVER_URL }} # Fetch from GitHub Secrets

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Replace with your Java version
          distribution: 'temurin'

      - name: Build Java project with Maven
        run: mvn clean package -f user-auth/pom.xml # Replace with Gradle if needed

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-auth:latest -f user-auth/Dockerfile ./user-auth

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/user-auth:latest

  deploy:
    runs-on: self-hosted # Use self-hosted runner for deployment
    needs: build-and-push
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/user-auth:latest

      - name: Stop and remove existing container
        run: |
          docker stop user-auth || true
          docker rm user-auth || true

      - name: Run Docker container
        run: |
          docker run -d --name user-auth -p ${{ env.AUTH_SERVER_PORT }}:${{ env.AUTH_SERVER_PORT }} \
            -e AUTH_SERVER_PORT=${{ env.AUTH_SERVER_PORT }} \
            -e DB_URL=${{ env.DB_URL }} \
            -e DB_USERNAME=${{ env.DB_USERNAME }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            -e EMAIL_SERVER_URL=${{ env.EMAIL_SERVER_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/user-auth:latest
